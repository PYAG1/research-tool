/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CategoryImport } from './routes/category'
import { Route as CategoriesImport } from './routes/categories'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as CategoryUnsortedImport } from './routes/category/unsorted'
import { Route as CategoryIdImport } from './routes/category/$id'

// Create/Update Routes

const CategoryRoute = CategoryImport.update({
  id: '/category',
  path: '/category',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesRoute = CategoriesImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CategoryUnsortedRoute = CategoryUnsortedImport.update({
  id: '/unsorted',
  path: '/unsorted',
  getParentRoute: () => CategoryRoute,
} as any)

const CategoryIdRoute = CategoryIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => CategoryRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesImport
      parentRoute: typeof rootRoute
    }
    '/category': {
      id: '/category'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof CategoryImport
      parentRoute: typeof rootRoute
    }
    '/category/$id': {
      id: '/category/$id'
      path: '/$id'
      fullPath: '/category/$id'
      preLoaderRoute: typeof CategoryIdImport
      parentRoute: typeof CategoryImport
    }
    '/category/unsorted': {
      id: '/category/unsorted'
      path: '/unsorted'
      fullPath: '/category/unsorted'
      preLoaderRoute: typeof CategoryUnsortedImport
      parentRoute: typeof CategoryImport
    }
  }
}

// Create and export the route tree

interface CategoryRouteChildren {
  CategoryIdRoute: typeof CategoryIdRoute
  CategoryUnsortedRoute: typeof CategoryUnsortedRoute
}

const CategoryRouteChildren: CategoryRouteChildren = {
  CategoryIdRoute: CategoryIdRoute,
  CategoryUnsortedRoute: CategoryUnsortedRoute,
}

const CategoryRouteWithChildren = CategoryRoute._addFileChildren(
  CategoryRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/categories': typeof CategoriesRoute
  '/category': typeof CategoryRouteWithChildren
  '/category/$id': typeof CategoryIdRoute
  '/category/unsorted': typeof CategoryUnsortedRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/categories': typeof CategoriesRoute
  '/category': typeof CategoryRouteWithChildren
  '/category/$id': typeof CategoryIdRoute
  '/category/unsorted': typeof CategoryUnsortedRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/categories': typeof CategoriesRoute
  '/category': typeof CategoryRouteWithChildren
  '/category/$id': typeof CategoryIdRoute
  '/category/unsorted': typeof CategoryUnsortedRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/categories'
    | '/category'
    | '/category/$id'
    | '/category/unsorted'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/categories'
    | '/category'
    | '/category/$id'
    | '/category/unsorted'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/categories'
    | '/category'
    | '/category/$id'
    | '/category/unsorted'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  CategoriesRoute: typeof CategoriesRoute
  CategoryRoute: typeof CategoryRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  CategoriesRoute: CategoriesRoute,
  CategoryRoute: CategoryRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/categories",
        "/category"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/categories": {
      "filePath": "categories.tsx"
    },
    "/category": {
      "filePath": "category.tsx",
      "children": [
        "/category/$id",
        "/category/unsorted"
      ]
    },
    "/category/$id": {
      "filePath": "category/$id.tsx",
      "parent": "/category"
    },
    "/category/unsorted": {
      "filePath": "category/unsorted.tsx",
      "parent": "/category"
    }
  }
}
ROUTE_MANIFEST_END */
